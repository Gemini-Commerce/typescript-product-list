/* tslint:disable */
/* eslint-disable */
/**
 * Collection Service
 * API for managing collection
 *
 * The version of the OpenAPI document: v1
 * Contact: info@gemini-commerce.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @enum {string}
 */

export const OrderByDirection = {
    Default: 'DEFAULT',
    Asc: 'ASC',
    Desc: 'DESC'
} as const;

export type OrderByDirection = typeof OrderByDirection[keyof typeof OrderByDirection];


/**
 * 
 * @export
 * @interface ProductlistBulkUpdateProductListAssociationsRequest
 */
export interface ProductlistBulkUpdateProductListAssociationsRequest {
    /**
     * 
     * @type {string}
     * @memberof ProductlistBulkUpdateProductListAssociationsRequest
     */
    'tenantId'?: string;
    /**
     * 
     * @type {Array<ProductlistBulkUpdateProductListAssociationsRequestProductListAssociation>}
     * @memberof ProductlistBulkUpdateProductListAssociationsRequest
     */
    'productListAssociations'?: Array<ProductlistBulkUpdateProductListAssociationsRequestProductListAssociation>;
}
/**
 * 
 * @export
 * @interface ProductlistBulkUpdateProductListAssociationsRequestProductListAssociation
 */
export interface ProductlistBulkUpdateProductListAssociationsRequestProductListAssociation {
    /**
     * 
     * @type {string}
     * @memberof ProductlistBulkUpdateProductListAssociationsRequestProductListAssociation
     */
    'id'?: string;
    /**
     * 
     * @type {number}
     * @memberof ProductlistBulkUpdateProductListAssociationsRequestProductListAssociation
     */
    'position'?: number;
}
/**
 * 
 * @export
 * @interface ProductlistCreateProductListAssociationRequest
 */
export interface ProductlistCreateProductListAssociationRequest {
    /**
     * 
     * @type {string}
     * @memberof ProductlistCreateProductListAssociationRequest
     */
    'tenantId'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductlistCreateProductListAssociationRequest
     */
    'listId'?: string;
    /**
     * 
     * @type {number}
     * @memberof ProductlistCreateProductListAssociationRequest
     */
    'position'?: number;
    /**
     * 
     * @type {string}
     * @memberof ProductlistCreateProductListAssociationRequest
     */
    'productGrn'?: string;
}
/**
 * 
 * @export
 * @interface ProductlistCreateProductListAssociationResponse
 */
export interface ProductlistCreateProductListAssociationResponse {
    /**
     * 
     * @type {ProductlistProductListAssociation}
     * @memberof ProductlistCreateProductListAssociationResponse
     */
    'association'?: ProductlistProductListAssociation;
    /**
     * 
     * @type {Array<ProductlistProductListAssociationError>}
     * @memberof ProductlistCreateProductListAssociationResponse
     */
    'errors'?: Array<ProductlistProductListAssociationError>;
}
/**
 * 
 * @export
 * @interface ProductlistCreateProductListRequest
 */
export interface ProductlistCreateProductListRequest {
    /**
     * 
     * @type {string}
     * @memberof ProductlistCreateProductListRequest
     */
    'tenantId'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductlistCreateProductListRequest
     */
    'code'?: string;
    /**
     * 
     * @type {ProductlistLocalizedText}
     * @memberof ProductlistCreateProductListRequest
     */
    'urlKey'?: ProductlistLocalizedText;
    /**
     * 
     * @type {string}
     * @memberof ProductlistCreateProductListRequest
     */
    'entityType'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductlistCreateProductListRequest
     */
    'entityCode'?: string;
    /**
     * 
     * @type {{ [key: string]: ProtobufAny; }}
     * @memberof ProductlistCreateProductListRequest
     */
    'attributes'?: { [key: string]: ProtobufAny; };
}
/**
 * 
 * @export
 * @interface ProductlistCreateProductListResponse
 */
export interface ProductlistCreateProductListResponse {
    /**
     * 
     * @type {ProductlistProductListEntity}
     * @memberof ProductlistCreateProductListResponse
     */
    'list'?: ProductlistProductListEntity;
    /**
     * 
     * @type {Array<ProductlistProductListError>}
     * @memberof ProductlistCreateProductListResponse
     */
    'errors'?: Array<ProductlistProductListError>;
}
/**
 * 
 * @export
 * @interface ProductlistDeleteProductListAssociationRequest
 */
export interface ProductlistDeleteProductListAssociationRequest {
    /**
     * 
     * @type {string}
     * @memberof ProductlistDeleteProductListAssociationRequest
     */
    'tenantId'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductlistDeleteProductListAssociationRequest
     */
    'id'?: string;
}
/**
 * 
 * @export
 * @interface ProductlistDeleteProductListAssociationResponse
 */
export interface ProductlistDeleteProductListAssociationResponse {
    /**
     * 
     * @type {ProductlistProductListAssociation}
     * @memberof ProductlistDeleteProductListAssociationResponse
     */
    'association'?: ProductlistProductListAssociation;
    /**
     * 
     * @type {Array<ProductlistProductListAssociationError>}
     * @memberof ProductlistDeleteProductListAssociationResponse
     */
    'errors'?: Array<ProductlistProductListAssociationError>;
}
/**
 * 
 * @export
 * @interface ProductlistDeleteProductListRequest
 */
export interface ProductlistDeleteProductListRequest {
    /**
     * 
     * @type {string}
     * @memberof ProductlistDeleteProductListRequest
     */
    'tenantId'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductlistDeleteProductListRequest
     */
    'id'?: string;
}
/**
 * 
 * @export
 * @interface ProductlistDeleteProductListResponse
 */
export interface ProductlistDeleteProductListResponse {
    /**
     * 
     * @type {ProductlistProductListEntity}
     * @memberof ProductlistDeleteProductListResponse
     */
    'list'?: ProductlistProductListEntity;
    /**
     * 
     * @type {Array<ProductlistProductListError>}
     * @memberof ProductlistDeleteProductListResponse
     */
    'errors'?: Array<ProductlistProductListError>;
}
/**
 * 
 * @export
 * @interface ProductlistGetProductListAssociationsByProductGrnRequest
 */
export interface ProductlistGetProductListAssociationsByProductGrnRequest {
    /**
     * 
     * @type {string}
     * @memberof ProductlistGetProductListAssociationsByProductGrnRequest
     */
    'tenantId'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductlistGetProductListAssociationsByProductGrnRequest
     */
    'productGrn'?: string;
}
/**
 * 
 * @export
 * @interface ProductlistGetProductListAssociationsByProductGrnResponse
 */
export interface ProductlistGetProductListAssociationsByProductGrnResponse {
    /**
     * 
     * @type {Array<ProductlistProductListAssociation>}
     * @memberof ProductlistGetProductListAssociationsByProductGrnResponse
     */
    'associations'?: Array<ProductlistProductListAssociation>;
}
/**
 * 
 * @export
 * @interface ProductlistGetProductListByCodeRequest
 */
export interface ProductlistGetProductListByCodeRequest {
    /**
     * 
     * @type {string}
     * @memberof ProductlistGetProductListByCodeRequest
     */
    'tenantId'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductlistGetProductListByCodeRequest
     */
    'code'?: string;
}
/**
 * 
 * @export
 * @interface ProductlistGetProductListByCodeResponse
 */
export interface ProductlistGetProductListByCodeResponse {
    /**
     * 
     * @type {ProductlistProductListEntity}
     * @memberof ProductlistGetProductListByCodeResponse
     */
    'list'?: ProductlistProductListEntity;
}
/**
 * 
 * @export
 * @interface ProductlistGetProductListByIdRequest
 */
export interface ProductlistGetProductListByIdRequest {
    /**
     * 
     * @type {string}
     * @memberof ProductlistGetProductListByIdRequest
     */
    'tenantId'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductlistGetProductListByIdRequest
     */
    'id'?: string;
}
/**
 * 
 * @export
 * @interface ProductlistGetProductListByIdResponse
 */
export interface ProductlistGetProductListByIdResponse {
    /**
     * 
     * @type {ProductlistProductListEntity}
     * @memberof ProductlistGetProductListByIdResponse
     */
    'list'?: ProductlistProductListEntity;
}
/**
 * 
 * @export
 * @interface ProductlistGetProductListByUrlKeyRequest
 */
export interface ProductlistGetProductListByUrlKeyRequest {
    /**
     * 
     * @type {string}
     * @memberof ProductlistGetProductListByUrlKeyRequest
     */
    'tenantId'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductlistGetProductListByUrlKeyRequest
     */
    'urlKey'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductlistGetProductListByUrlKeyRequest
     */
    'locale'?: string;
}
/**
 * 
 * @export
 * @interface ProductlistGetProductListByUrlKeyResponse
 */
export interface ProductlistGetProductListByUrlKeyResponse {
    /**
     * 
     * @type {ProductlistProductListEntity}
     * @memberof ProductlistGetProductListByUrlKeyResponse
     */
    'list'?: ProductlistProductListEntity;
}
/**
 * 
 * @export
 * @interface ProductlistGetProductListsCountRequest
 */
export interface ProductlistGetProductListsCountRequest {
    /**
     * 
     * @type {string}
     * @memberof ProductlistGetProductListsCountRequest
     */
    'tenantId'?: string;
}
/**
 * 
 * @export
 * @interface ProductlistGetProductListsCountResponse
 */
export interface ProductlistGetProductListsCountResponse {
    /**
     * 
     * @type {number}
     * @memberof ProductlistGetProductListsCountResponse
     */
    'totalSize'?: number;
}
/**
 * 
 * @export
 * @interface ProductlistListProductListAssociationsRequest
 */
export interface ProductlistListProductListAssociationsRequest {
    /**
     * 
     * @type {string}
     * @memberof ProductlistListProductListAssociationsRequest
     */
    'tenantId'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductlistListProductListAssociationsRequest
     */
    'listId'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductlistListProductListAssociationsRequest
     */
    'productGrn'?: string;
    /**
     * 
     * @type {number}
     * @memberof ProductlistListProductListAssociationsRequest
     */
    'pageSize'?: number;
    /**
     * 
     * @type {string}
     * @memberof ProductlistListProductListAssociationsRequest
     */
    'pageToken'?: string;
    /**
     * 
     * @type {Array<ProductlistOrderBy>}
     * @memberof ProductlistListProductListAssociationsRequest
     */
    'orderBy'?: Array<ProductlistOrderBy>;
}
/**
 * 
 * @export
 * @interface ProductlistListProductListAssociationsResponse
 */
export interface ProductlistListProductListAssociationsResponse {
    /**
     * 
     * @type {Array<ProductlistProductListAssociation>}
     * @memberof ProductlistListProductListAssociationsResponse
     */
    'associations'?: Array<ProductlistProductListAssociation>;
    /**
     * 
     * @type {string}
     * @memberof ProductlistListProductListAssociationsResponse
     */
    'nextPageToken'?: string;
}
/**
 * 
 * @export
 * @interface ProductlistListProductListsRequest
 */
export interface ProductlistListProductListsRequest {
    /**
     * 
     * @type {string}
     * @memberof ProductlistListProductListsRequest
     */
    'tenantId'?: string;
    /**
     * 
     * @type {number}
     * @memberof ProductlistListProductListsRequest
     */
    'pageSize'?: number;
    /**
     * 
     * @type {string}
     * @memberof ProductlistListProductListsRequest
     */
    'pageToken'?: string;
}
/**
 * 
 * @export
 * @interface ProductlistListProductListsResponse
 */
export interface ProductlistListProductListsResponse {
    /**
     * 
     * @type {Array<ProductlistProductListEntity>}
     * @memberof ProductlistListProductListsResponse
     */
    'lists'?: Array<ProductlistProductListEntity>;
    /**
     * 
     * @type {string}
     * @memberof ProductlistListProductListsResponse
     */
    'nextPageToken'?: string;
}
/**
 * 
 * @export
 * @interface ProductlistLocalizedText
 */
export interface ProductlistLocalizedText {
    /**
     * 
     * @type {{ [key: string]: string; }}
     * @memberof ProductlistLocalizedText
     */
    'value'?: { [key: string]: string; };
}
/**
 * 
 * @export
 * @interface ProductlistOrderBy
 */
export interface ProductlistOrderBy {
    /**
     * 
     * @type {string}
     * @memberof ProductlistOrderBy
     */
    'field'?: string;
    /**
     * 
     * @type {OrderByDirection}
     * @memberof ProductlistOrderBy
     */
    'direction'?: OrderByDirection;
}


/**
 * 
 * @export
 * @interface ProductlistProductListAssociation
 */
export interface ProductlistProductListAssociation {
    /**
     * 
     * @type {string}
     * @memberof ProductlistProductListAssociation
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductlistProductListAssociation
     */
    'listId'?: string;
    /**
     * 
     * @type {number}
     * @memberof ProductlistProductListAssociation
     */
    'position'?: number;
    /**
     * 
     * @type {string}
     * @memberof ProductlistProductListAssociation
     */
    'productGrn'?: string;
}
/**
 * 
 * @export
 * @interface ProductlistProductListAssociationError
 */
export interface ProductlistProductListAssociationError {
    /**
     * 
     * @type {string}
     * @memberof ProductlistProductListAssociationError
     */
    'code'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductlistProductListAssociationError
     */
    'message'?: string;
}
/**
 * 
 * @export
 * @interface ProductlistProductListEntity
 */
export interface ProductlistProductListEntity {
    /**
     * 
     * @type {string}
     * @memberof ProductlistProductListEntity
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductlistProductListEntity
     */
    'code'?: string;
    /**
     * 
     * @type {ProductlistLocalizedText}
     * @memberof ProductlistProductListEntity
     */
    'urlKey'?: ProductlistLocalizedText;
    /**
     * 
     * @type {string}
     * @memberof ProductlistProductListEntity
     */
    'entityType'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductlistProductListEntity
     */
    'entityCode'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductlistProductListEntity
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductlistProductListEntity
     */
    'updatedAt'?: string;
    /**
     * 
     * @type {{ [key: string]: ProtobufAny; }}
     * @memberof ProductlistProductListEntity
     */
    'attributes'?: { [key: string]: ProtobufAny; };
    /**
     * 
     * @type {number}
     * @memberof ProductlistProductListEntity
     */
    'countAssociations'?: number;
}
/**
 * 
 * @export
 * @interface ProductlistProductListError
 */
export interface ProductlistProductListError {
    /**
     * 
     * @type {string}
     * @memberof ProductlistProductListError
     */
    'code'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductlistProductListError
     */
    'message'?: string;
}
/**
 * 
 * @export
 * @interface ProductlistSearchProductListsByIdsRequest
 */
export interface ProductlistSearchProductListsByIdsRequest {
    /**
     * 
     * @type {string}
     * @memberof ProductlistSearchProductListsByIdsRequest
     */
    'tenantId'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof ProductlistSearchProductListsByIdsRequest
     */
    'ids'?: Array<string>;
    /**
     * 
     * @type {number}
     * @memberof ProductlistSearchProductListsByIdsRequest
     */
    'pageSize'?: number;
    /**
     * 
     * @type {number}
     * @memberof ProductlistSearchProductListsByIdsRequest
     */
    'pageNumber'?: number;
}
/**
 * 
 * @export
 * @interface ProductlistSearchProductListsByIdsResponse
 */
export interface ProductlistSearchProductListsByIdsResponse {
    /**
     * 
     * @type {Array<ProductlistProductListEntity>}
     * @memberof ProductlistSearchProductListsByIdsResponse
     */
    'results'?: Array<ProductlistProductListEntity>;
}
/**
 * 
 * @export
 * @interface ProductlistSearchProductListsRequest
 */
export interface ProductlistSearchProductListsRequest {
    /**
     * 
     * @type {string}
     * @memberof ProductlistSearchProductListsRequest
     */
    'tenantId'?: string;
    /**
     * 
     * @type {SearchProductListsRequestQuery}
     * @memberof ProductlistSearchProductListsRequest
     */
    'query'?: SearchProductListsRequestQuery;
    /**
     * 
     * @type {number}
     * @memberof ProductlistSearchProductListsRequest
     */
    'pageSize'?: number;
    /**
     * 
     * @type {number}
     * @memberof ProductlistSearchProductListsRequest
     */
    'pageNumber'?: number;
}
/**
 * 
 * @export
 * @interface ProductlistSearchProductListsResponse
 */
export interface ProductlistSearchProductListsResponse {
    /**
     * 
     * @type {Array<ProductlistProductListEntity>}
     * @memberof ProductlistSearchProductListsResponse
     */
    'results'?: Array<ProductlistProductListEntity>;
    /**
     * 
     * @type {number}
     * @memberof ProductlistSearchProductListsResponse
     */
    'totalSize'?: number;
}
/**
 * 
 * @export
 * @interface ProductlistUpdateProductListRequest
 */
export interface ProductlistUpdateProductListRequest {
    /**
     * 
     * @type {string}
     * @memberof ProductlistUpdateProductListRequest
     */
    'tenantId'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductlistUpdateProductListRequest
     */
    'id'?: string;
    /**
     * 
     * @type {ProductlistLocalizedText}
     * @memberof ProductlistUpdateProductListRequest
     */
    'urlKey'?: ProductlistLocalizedText;
    /**
     * 
     * @type {{ [key: string]: ProtobufAny; }}
     * @memberof ProductlistUpdateProductListRequest
     */
    'attributes'?: { [key: string]: ProtobufAny; };
    /**
     * 
     * @type {string}
     * @memberof ProductlistUpdateProductListRequest
     */
    'attributesMask'?: string;
}
/**
 * 
 * @export
 * @interface ProductlistUpdateProductListResponse
 */
export interface ProductlistUpdateProductListResponse {
    /**
     * 
     * @type {ProductlistProductListEntity}
     * @memberof ProductlistUpdateProductListResponse
     */
    'list'?: ProductlistProductListEntity;
    /**
     * 
     * @type {Array<ProductlistProductListError>}
     * @memberof ProductlistUpdateProductListResponse
     */
    'errors'?: Array<ProductlistProductListError>;
}
/**
 * `Any` contains an arbitrary serialized protocol buffer message along with a URL that describes the type of the serialized message.  Protobuf library provides support to pack/unpack Any values in the form of utility functions or additional generated methods of the Any type.  Example 1: Pack and unpack a message in C++.      Foo foo = ...;     Any any;     any.PackFrom(foo);     ...     if (any.UnpackTo(&foo)) {       ...     }  Example 2: Pack and unpack a message in Java.      Foo foo = ...;     Any any = Any.pack(foo);     ...     if (any.is(Foo.class)) {       foo = any.unpack(Foo.class);     }  Example 3: Pack and unpack a message in Python.      foo = Foo(...)     any = Any()     any.Pack(foo)     ...     if any.Is(Foo.DESCRIPTOR):       any.Unpack(foo)       ...  Example 4: Pack and unpack a message in Go       foo := &pb.Foo{...}      any, err := anypb.New(foo)      if err != nil {        ...      }      ...      foo := &pb.Foo{}      if err := any.UnmarshalTo(foo); err != nil {        ...      }  The pack methods provided by protobuf library will by default use \'type.googleapis.com/full.type.name\' as the type URL and the unpack methods only use the fully qualified type name after the last \'/\' in the type URL, for example \"foo.bar.com/x/y.z\" will yield type name \"y.z\".   JSON  The JSON representation of an `Any` value uses the regular representation of the deserialized, embedded message, with an additional field `@type` which contains the type URL. Example:      package google.profile;     message Person {       string first_name = 1;       string last_name = 2;     }      {       \"@type\": \"type.googleapis.com/google.profile.Person\",       \"firstName\": <string>,       \"lastName\": <string>     }  If the embedded message type is well-known and has a custom JSON representation, that representation will be embedded adding a field `value` which holds the custom JSON in addition to the `@type` field. Example (for message [google.protobuf.Duration][]):      {       \"@type\": \"type.googleapis.com/google.protobuf.Duration\",       \"value\": \"1.212s\"     }
 * @export
 * @interface ProtobufAny
 */
export interface ProtobufAny {
    [key: string]: any;

    /**
     * A URL/resource name that uniquely identifies the type of the serialized protocol buffer message. This string must contain at least one \"/\" character. The last segment of the URL\'s path must represent the fully qualified name of the type (as in `path/google.protobuf.Duration`). The name should be in a canonical form (e.g., leading \".\" is not accepted).  In practice, teams usually precompile into the binary all types that they expect it to use in the context of Any. However, for URLs which use the scheme `http`, `https`, or no scheme, one can optionally set up a type server that maps type URLs to message definitions as follows:  * If no scheme is provided, `https` is assumed. * An HTTP GET on the URL must yield a [google.protobuf.Type][]   value in binary format, or produce an error. * Applications are allowed to cache lookup results based on the   URL, or have them precompiled into a binary to avoid any   lookup. Therefore, binary compatibility needs to be preserved   on changes to types. (Use versioned type names to manage   breaking changes.)  Note: this functionality is not currently available in the official protobuf release, and it is not used for type URLs beginning with type.googleapis.com.  Schemes other than `http`, `https` (or the empty scheme) might be used with implementation specific semantics.
     * @type {string}
     * @memberof ProtobufAny
     */
    '@type'?: string;
}
/**
 * 
 * @export
 * @interface RpcStatus
 */
export interface RpcStatus {
    /**
     * 
     * @type {number}
     * @memberof RpcStatus
     */
    'code'?: number;
    /**
     * 
     * @type {string}
     * @memberof RpcStatus
     */
    'message'?: string;
    /**
     * 
     * @type {Array<ProtobufAny>}
     * @memberof RpcStatus
     */
    'details'?: Array<ProtobufAny>;
}
/**
 * 
 * @export
 * @interface SearchProductListsRequestQuery
 */
export interface SearchProductListsRequestQuery {
    /**
     * 
     * @type {Array<string>}
     * @memberof SearchProductListsRequestQuery
     */
    'attributes'?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof SearchProductListsRequestQuery
     */
    'value'?: string;
}

/**
 * ProductListApi - axios parameter creator
 * @export
 */
export const ProductListApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * The BulkUpdateProductListAssociations endpoint updates the positions of specified associations.
         * @summary Bulk update collection associations position
         * @param {ProductlistBulkUpdateProductListAssociationsRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bulkUpdateProductListAssociations: async (body: ProductlistBulkUpdateProductListAssociationsRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('bulkUpdateProductListAssociations', 'body', body)
            const localVarPath = `/productlist.ProductList/BulkUpdateProductListAssociations`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication standardAuthorization required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "standardAuthorization", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * The CreateProductList endpoint is used to create a new collection of products within the system. This endpoint allows users to define the details and attributes of the collection.
         * @summary Create Collection
         * @param {ProductlistCreateProductListRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createProductList: async (body: ProductlistCreateProductListRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('createProductList', 'body', body)
            const localVarPath = `/productlist.ProductList/CreateProductList`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication standardAuthorization required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "standardAuthorization", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * The CreateProductListAssociation endpoint is used to create an association between a collection and a product.
         * @summary Create Collection/Product Association
         * @param {ProductlistCreateProductListAssociationRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createProductListAssociation: async (body: ProductlistCreateProductListAssociationRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('createProductListAssociation', 'body', body)
            const localVarPath = `/productlist.ProductList/CreateProductListAssociation`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication standardAuthorization required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "standardAuthorization", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * The DeleteProductList endpoint is used to delete an existing collection of products within the system.
         * @summary Delete Collection
         * @param {ProductlistDeleteProductListRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteProductList: async (body: ProductlistDeleteProductListRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('deleteProductList', 'body', body)
            const localVarPath = `/productlist.ProductList/DeleteProductList`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication standardAuthorization required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "standardAuthorization", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * The DeleteProductListAssociation endpoint is used to delete an association between a collection and a product.
         * @summary Delete Collection/Product Association
         * @param {ProductlistDeleteProductListAssociationRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteProductListAssociation: async (body: ProductlistDeleteProductListAssociationRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('deleteProductListAssociation', 'body', body)
            const localVarPath = `/productlist.ProductList/DeleteProductListAssociation`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication standardAuthorization required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "standardAuthorization", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * The GetProductListAssociationsByProductGrn endpoint is used to get the associations between a collection and a list of products by product GRN.
         * @summary Get Collection/Product Associations by Product GRN
         * @param {ProductlistGetProductListAssociationsByProductGrnRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProductListAssociationsByProductGrn: async (body: ProductlistGetProductListAssociationsByProductGrnRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('getProductListAssociationsByProductGrn', 'body', body)
            const localVarPath = `/productlist.ProductList/GetProductListAssociationsByProductGrn`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication standardAuthorization required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "standardAuthorization", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * The GetProductListByCode endpoint is used to retrieve an existing collection of products within the system.
         * @summary Get Collection by Code
         * @param {ProductlistGetProductListByCodeRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProductListByCode: async (body: ProductlistGetProductListByCodeRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('getProductListByCode', 'body', body)
            const localVarPath = `/productlist.ProductList/GetProductListByCode`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication standardAuthorization required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "standardAuthorization", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * The GetProductListById endpoint is used to retrieve an existing collection of products within the system.
         * @summary Get Collection by Id
         * @param {ProductlistGetProductListByIdRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProductListById: async (body: ProductlistGetProductListByIdRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('getProductListById', 'body', body)
            const localVarPath = `/productlist.ProductList/GetProductListById`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication standardAuthorization required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "standardAuthorization", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * The GetProductListByUrlKey endpoint is used to retrieve an existing collection of products within the system.
         * @summary Get Collection by Url Key
         * @param {ProductlistGetProductListByUrlKeyRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProductListByUrlKey: async (body: ProductlistGetProductListByUrlKeyRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('getProductListByUrlKey', 'body', body)
            const localVarPath = `/productlist.ProductList/GetProductListByUrlKey`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication standardAuthorization required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "standardAuthorization", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * The GetProductListsCount endpoint is used to get the number of products associated with a collection.
         * @summary Get Collection Product Count
         * @param {ProductlistGetProductListsCountRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProductListsCount: async (body: ProductlistGetProductListsCountRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('getProductListsCount', 'body', body)
            const localVarPath = `/productlist.ProductList/GetProductListsCount`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication standardAuthorization required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "standardAuthorization", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * The ListProductListAssociations endpoint is used to list the associations between a collection and a list of products.
         * @summary List Collection/Product Associations
         * @param {ProductlistListProductListAssociationsRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listProductListAssociations: async (body: ProductlistListProductListAssociationsRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('listProductListAssociations', 'body', body)
            const localVarPath = `/productlist.ProductList/ListProductListAssociations`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication standardAuthorization required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "standardAuthorization", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * The ListProductLists endpoint is used to retrieve a list of existing collections of products within the system.
         * @summary List Collections
         * @param {ProductlistListProductListsRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listProductLists: async (body: ProductlistListProductListsRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('listProductLists', 'body', body)
            const localVarPath = `/productlist.ProductList/ListProductLists`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication standardAuthorization required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "standardAuthorization", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * The SearchProductLists endpoint is used to retrieve a list of existing collections of products within the system.
         * @summary Search Collections
         * @param {ProductlistSearchProductListsRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchProductLists: async (body: ProductlistSearchProductListsRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('searchProductLists', 'body', body)
            const localVarPath = `/productlist.ProductList/SearchProductLists`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication standardAuthorization required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "standardAuthorization", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * The SearchProductListsByIds endpoint is used to retrieve a list of existing collections of products within the system.
         * @summary Search Collections by Ids
         * @param {ProductlistSearchProductListsByIdsRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchProductListsByIds: async (body: ProductlistSearchProductListsByIdsRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('searchProductListsByIds', 'body', body)
            const localVarPath = `/productlist.ProductList/SearchProductListsByIds`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication standardAuthorization required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "standardAuthorization", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * The UpdateProductList endpoint is used to update an existing collection of products within the system.
         * @summary Update Collection
         * @param {ProductlistUpdateProductListRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateProductList: async (body: ProductlistUpdateProductListRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('updateProductList', 'body', body)
            const localVarPath = `/productlist.ProductList/UpdateProductList`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication standardAuthorization required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "standardAuthorization", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProductListApi - functional programming interface
 * @export
 */
export const ProductListApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProductListApiAxiosParamCreator(configuration)
    return {
        /**
         * The BulkUpdateProductListAssociations endpoint updates the positions of specified associations.
         * @summary Bulk update collection associations position
         * @param {ProductlistBulkUpdateProductListAssociationsRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async bulkUpdateProductListAssociations(body: ProductlistBulkUpdateProductListAssociationsRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RpcStatus>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.bulkUpdateProductListAssociations(body, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ProductListApi.bulkUpdateProductListAssociations']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * The CreateProductList endpoint is used to create a new collection of products within the system. This endpoint allows users to define the details and attributes of the collection.
         * @summary Create Collection
         * @param {ProductlistCreateProductListRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createProductList(body: ProductlistCreateProductListRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductlistCreateProductListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createProductList(body, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ProductListApi.createProductList']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * The CreateProductListAssociation endpoint is used to create an association between a collection and a product.
         * @summary Create Collection/Product Association
         * @param {ProductlistCreateProductListAssociationRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createProductListAssociation(body: ProductlistCreateProductListAssociationRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductlistCreateProductListAssociationResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createProductListAssociation(body, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ProductListApi.createProductListAssociation']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * The DeleteProductList endpoint is used to delete an existing collection of products within the system.
         * @summary Delete Collection
         * @param {ProductlistDeleteProductListRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteProductList(body: ProductlistDeleteProductListRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductlistDeleteProductListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteProductList(body, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ProductListApi.deleteProductList']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * The DeleteProductListAssociation endpoint is used to delete an association between a collection and a product.
         * @summary Delete Collection/Product Association
         * @param {ProductlistDeleteProductListAssociationRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteProductListAssociation(body: ProductlistDeleteProductListAssociationRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductlistDeleteProductListAssociationResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteProductListAssociation(body, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ProductListApi.deleteProductListAssociation']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * The GetProductListAssociationsByProductGrn endpoint is used to get the associations between a collection and a list of products by product GRN.
         * @summary Get Collection/Product Associations by Product GRN
         * @param {ProductlistGetProductListAssociationsByProductGrnRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProductListAssociationsByProductGrn(body: ProductlistGetProductListAssociationsByProductGrnRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductlistGetProductListAssociationsByProductGrnResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getProductListAssociationsByProductGrn(body, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ProductListApi.getProductListAssociationsByProductGrn']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * The GetProductListByCode endpoint is used to retrieve an existing collection of products within the system.
         * @summary Get Collection by Code
         * @param {ProductlistGetProductListByCodeRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProductListByCode(body: ProductlistGetProductListByCodeRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductlistGetProductListByCodeResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getProductListByCode(body, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ProductListApi.getProductListByCode']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * The GetProductListById endpoint is used to retrieve an existing collection of products within the system.
         * @summary Get Collection by Id
         * @param {ProductlistGetProductListByIdRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProductListById(body: ProductlistGetProductListByIdRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductlistGetProductListByIdResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getProductListById(body, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ProductListApi.getProductListById']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * The GetProductListByUrlKey endpoint is used to retrieve an existing collection of products within the system.
         * @summary Get Collection by Url Key
         * @param {ProductlistGetProductListByUrlKeyRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProductListByUrlKey(body: ProductlistGetProductListByUrlKeyRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductlistGetProductListByUrlKeyResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getProductListByUrlKey(body, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ProductListApi.getProductListByUrlKey']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * The GetProductListsCount endpoint is used to get the number of products associated with a collection.
         * @summary Get Collection Product Count
         * @param {ProductlistGetProductListsCountRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProductListsCount(body: ProductlistGetProductListsCountRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductlistGetProductListsCountResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getProductListsCount(body, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ProductListApi.getProductListsCount']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * The ListProductListAssociations endpoint is used to list the associations between a collection and a list of products.
         * @summary List Collection/Product Associations
         * @param {ProductlistListProductListAssociationsRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listProductListAssociations(body: ProductlistListProductListAssociationsRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductlistListProductListAssociationsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listProductListAssociations(body, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ProductListApi.listProductListAssociations']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * The ListProductLists endpoint is used to retrieve a list of existing collections of products within the system.
         * @summary List Collections
         * @param {ProductlistListProductListsRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listProductLists(body: ProductlistListProductListsRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductlistListProductListsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listProductLists(body, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ProductListApi.listProductLists']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * The SearchProductLists endpoint is used to retrieve a list of existing collections of products within the system.
         * @summary Search Collections
         * @param {ProductlistSearchProductListsRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async searchProductLists(body: ProductlistSearchProductListsRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductlistSearchProductListsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.searchProductLists(body, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ProductListApi.searchProductLists']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * The SearchProductListsByIds endpoint is used to retrieve a list of existing collections of products within the system.
         * @summary Search Collections by Ids
         * @param {ProductlistSearchProductListsByIdsRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async searchProductListsByIds(body: ProductlistSearchProductListsByIdsRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductlistSearchProductListsByIdsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.searchProductListsByIds(body, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ProductListApi.searchProductListsByIds']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * The UpdateProductList endpoint is used to update an existing collection of products within the system.
         * @summary Update Collection
         * @param {ProductlistUpdateProductListRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateProductList(body: ProductlistUpdateProductListRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductlistUpdateProductListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateProductList(body, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ProductListApi.updateProductList']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * ProductListApi - factory interface
 * @export
 */
export const ProductListApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProductListApiFp(configuration)
    return {
        /**
         * The BulkUpdateProductListAssociations endpoint updates the positions of specified associations.
         * @summary Bulk update collection associations position
         * @param {ProductlistBulkUpdateProductListAssociationsRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bulkUpdateProductListAssociations(body: ProductlistBulkUpdateProductListAssociationsRequest, options?: any): AxiosPromise<RpcStatus> {
            return localVarFp.bulkUpdateProductListAssociations(body, options).then((request) => request(axios, basePath));
        },
        /**
         * The CreateProductList endpoint is used to create a new collection of products within the system. This endpoint allows users to define the details and attributes of the collection.
         * @summary Create Collection
         * @param {ProductlistCreateProductListRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createProductList(body: ProductlistCreateProductListRequest, options?: any): AxiosPromise<ProductlistCreateProductListResponse> {
            return localVarFp.createProductList(body, options).then((request) => request(axios, basePath));
        },
        /**
         * The CreateProductListAssociation endpoint is used to create an association between a collection and a product.
         * @summary Create Collection/Product Association
         * @param {ProductlistCreateProductListAssociationRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createProductListAssociation(body: ProductlistCreateProductListAssociationRequest, options?: any): AxiosPromise<ProductlistCreateProductListAssociationResponse> {
            return localVarFp.createProductListAssociation(body, options).then((request) => request(axios, basePath));
        },
        /**
         * The DeleteProductList endpoint is used to delete an existing collection of products within the system.
         * @summary Delete Collection
         * @param {ProductlistDeleteProductListRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteProductList(body: ProductlistDeleteProductListRequest, options?: any): AxiosPromise<ProductlistDeleteProductListResponse> {
            return localVarFp.deleteProductList(body, options).then((request) => request(axios, basePath));
        },
        /**
         * The DeleteProductListAssociation endpoint is used to delete an association between a collection and a product.
         * @summary Delete Collection/Product Association
         * @param {ProductlistDeleteProductListAssociationRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteProductListAssociation(body: ProductlistDeleteProductListAssociationRequest, options?: any): AxiosPromise<ProductlistDeleteProductListAssociationResponse> {
            return localVarFp.deleteProductListAssociation(body, options).then((request) => request(axios, basePath));
        },
        /**
         * The GetProductListAssociationsByProductGrn endpoint is used to get the associations between a collection and a list of products by product GRN.
         * @summary Get Collection/Product Associations by Product GRN
         * @param {ProductlistGetProductListAssociationsByProductGrnRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProductListAssociationsByProductGrn(body: ProductlistGetProductListAssociationsByProductGrnRequest, options?: any): AxiosPromise<ProductlistGetProductListAssociationsByProductGrnResponse> {
            return localVarFp.getProductListAssociationsByProductGrn(body, options).then((request) => request(axios, basePath));
        },
        /**
         * The GetProductListByCode endpoint is used to retrieve an existing collection of products within the system.
         * @summary Get Collection by Code
         * @param {ProductlistGetProductListByCodeRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProductListByCode(body: ProductlistGetProductListByCodeRequest, options?: any): AxiosPromise<ProductlistGetProductListByCodeResponse> {
            return localVarFp.getProductListByCode(body, options).then((request) => request(axios, basePath));
        },
        /**
         * The GetProductListById endpoint is used to retrieve an existing collection of products within the system.
         * @summary Get Collection by Id
         * @param {ProductlistGetProductListByIdRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProductListById(body: ProductlistGetProductListByIdRequest, options?: any): AxiosPromise<ProductlistGetProductListByIdResponse> {
            return localVarFp.getProductListById(body, options).then((request) => request(axios, basePath));
        },
        /**
         * The GetProductListByUrlKey endpoint is used to retrieve an existing collection of products within the system.
         * @summary Get Collection by Url Key
         * @param {ProductlistGetProductListByUrlKeyRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProductListByUrlKey(body: ProductlistGetProductListByUrlKeyRequest, options?: any): AxiosPromise<ProductlistGetProductListByUrlKeyResponse> {
            return localVarFp.getProductListByUrlKey(body, options).then((request) => request(axios, basePath));
        },
        /**
         * The GetProductListsCount endpoint is used to get the number of products associated with a collection.
         * @summary Get Collection Product Count
         * @param {ProductlistGetProductListsCountRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProductListsCount(body: ProductlistGetProductListsCountRequest, options?: any): AxiosPromise<ProductlistGetProductListsCountResponse> {
            return localVarFp.getProductListsCount(body, options).then((request) => request(axios, basePath));
        },
        /**
         * The ListProductListAssociations endpoint is used to list the associations between a collection and a list of products.
         * @summary List Collection/Product Associations
         * @param {ProductlistListProductListAssociationsRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listProductListAssociations(body: ProductlistListProductListAssociationsRequest, options?: any): AxiosPromise<ProductlistListProductListAssociationsResponse> {
            return localVarFp.listProductListAssociations(body, options).then((request) => request(axios, basePath));
        },
        /**
         * The ListProductLists endpoint is used to retrieve a list of existing collections of products within the system.
         * @summary List Collections
         * @param {ProductlistListProductListsRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listProductLists(body: ProductlistListProductListsRequest, options?: any): AxiosPromise<ProductlistListProductListsResponse> {
            return localVarFp.listProductLists(body, options).then((request) => request(axios, basePath));
        },
        /**
         * The SearchProductLists endpoint is used to retrieve a list of existing collections of products within the system.
         * @summary Search Collections
         * @param {ProductlistSearchProductListsRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchProductLists(body: ProductlistSearchProductListsRequest, options?: any): AxiosPromise<ProductlistSearchProductListsResponse> {
            return localVarFp.searchProductLists(body, options).then((request) => request(axios, basePath));
        },
        /**
         * The SearchProductListsByIds endpoint is used to retrieve a list of existing collections of products within the system.
         * @summary Search Collections by Ids
         * @param {ProductlistSearchProductListsByIdsRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchProductListsByIds(body: ProductlistSearchProductListsByIdsRequest, options?: any): AxiosPromise<ProductlistSearchProductListsByIdsResponse> {
            return localVarFp.searchProductListsByIds(body, options).then((request) => request(axios, basePath));
        },
        /**
         * The UpdateProductList endpoint is used to update an existing collection of products within the system.
         * @summary Update Collection
         * @param {ProductlistUpdateProductListRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateProductList(body: ProductlistUpdateProductListRequest, options?: any): AxiosPromise<ProductlistUpdateProductListResponse> {
            return localVarFp.updateProductList(body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ProductListApi - object-oriented interface
 * @export
 * @class ProductListApi
 * @extends {BaseAPI}
 */
export class ProductListApi extends BaseAPI {
    /**
     * The BulkUpdateProductListAssociations endpoint updates the positions of specified associations.
     * @summary Bulk update collection associations position
     * @param {ProductlistBulkUpdateProductListAssociationsRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductListApi
     */
    public bulkUpdateProductListAssociations(body: ProductlistBulkUpdateProductListAssociationsRequest, options?: RawAxiosRequestConfig) {
        return ProductListApiFp(this.configuration).bulkUpdateProductListAssociations(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * The CreateProductList endpoint is used to create a new collection of products within the system. This endpoint allows users to define the details and attributes of the collection.
     * @summary Create Collection
     * @param {ProductlistCreateProductListRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductListApi
     */
    public createProductList(body: ProductlistCreateProductListRequest, options?: RawAxiosRequestConfig) {
        return ProductListApiFp(this.configuration).createProductList(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * The CreateProductListAssociation endpoint is used to create an association between a collection and a product.
     * @summary Create Collection/Product Association
     * @param {ProductlistCreateProductListAssociationRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductListApi
     */
    public createProductListAssociation(body: ProductlistCreateProductListAssociationRequest, options?: RawAxiosRequestConfig) {
        return ProductListApiFp(this.configuration).createProductListAssociation(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * The DeleteProductList endpoint is used to delete an existing collection of products within the system.
     * @summary Delete Collection
     * @param {ProductlistDeleteProductListRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductListApi
     */
    public deleteProductList(body: ProductlistDeleteProductListRequest, options?: RawAxiosRequestConfig) {
        return ProductListApiFp(this.configuration).deleteProductList(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * The DeleteProductListAssociation endpoint is used to delete an association between a collection and a product.
     * @summary Delete Collection/Product Association
     * @param {ProductlistDeleteProductListAssociationRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductListApi
     */
    public deleteProductListAssociation(body: ProductlistDeleteProductListAssociationRequest, options?: RawAxiosRequestConfig) {
        return ProductListApiFp(this.configuration).deleteProductListAssociation(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * The GetProductListAssociationsByProductGrn endpoint is used to get the associations between a collection and a list of products by product GRN.
     * @summary Get Collection/Product Associations by Product GRN
     * @param {ProductlistGetProductListAssociationsByProductGrnRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductListApi
     */
    public getProductListAssociationsByProductGrn(body: ProductlistGetProductListAssociationsByProductGrnRequest, options?: RawAxiosRequestConfig) {
        return ProductListApiFp(this.configuration).getProductListAssociationsByProductGrn(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * The GetProductListByCode endpoint is used to retrieve an existing collection of products within the system.
     * @summary Get Collection by Code
     * @param {ProductlistGetProductListByCodeRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductListApi
     */
    public getProductListByCode(body: ProductlistGetProductListByCodeRequest, options?: RawAxiosRequestConfig) {
        return ProductListApiFp(this.configuration).getProductListByCode(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * The GetProductListById endpoint is used to retrieve an existing collection of products within the system.
     * @summary Get Collection by Id
     * @param {ProductlistGetProductListByIdRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductListApi
     */
    public getProductListById(body: ProductlistGetProductListByIdRequest, options?: RawAxiosRequestConfig) {
        return ProductListApiFp(this.configuration).getProductListById(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * The GetProductListByUrlKey endpoint is used to retrieve an existing collection of products within the system.
     * @summary Get Collection by Url Key
     * @param {ProductlistGetProductListByUrlKeyRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductListApi
     */
    public getProductListByUrlKey(body: ProductlistGetProductListByUrlKeyRequest, options?: RawAxiosRequestConfig) {
        return ProductListApiFp(this.configuration).getProductListByUrlKey(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * The GetProductListsCount endpoint is used to get the number of products associated with a collection.
     * @summary Get Collection Product Count
     * @param {ProductlistGetProductListsCountRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductListApi
     */
    public getProductListsCount(body: ProductlistGetProductListsCountRequest, options?: RawAxiosRequestConfig) {
        return ProductListApiFp(this.configuration).getProductListsCount(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * The ListProductListAssociations endpoint is used to list the associations between a collection and a list of products.
     * @summary List Collection/Product Associations
     * @param {ProductlistListProductListAssociationsRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductListApi
     */
    public listProductListAssociations(body: ProductlistListProductListAssociationsRequest, options?: RawAxiosRequestConfig) {
        return ProductListApiFp(this.configuration).listProductListAssociations(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * The ListProductLists endpoint is used to retrieve a list of existing collections of products within the system.
     * @summary List Collections
     * @param {ProductlistListProductListsRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductListApi
     */
    public listProductLists(body: ProductlistListProductListsRequest, options?: RawAxiosRequestConfig) {
        return ProductListApiFp(this.configuration).listProductLists(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * The SearchProductLists endpoint is used to retrieve a list of existing collections of products within the system.
     * @summary Search Collections
     * @param {ProductlistSearchProductListsRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductListApi
     */
    public searchProductLists(body: ProductlistSearchProductListsRequest, options?: RawAxiosRequestConfig) {
        return ProductListApiFp(this.configuration).searchProductLists(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * The SearchProductListsByIds endpoint is used to retrieve a list of existing collections of products within the system.
     * @summary Search Collections by Ids
     * @param {ProductlistSearchProductListsByIdsRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductListApi
     */
    public searchProductListsByIds(body: ProductlistSearchProductListsByIdsRequest, options?: RawAxiosRequestConfig) {
        return ProductListApiFp(this.configuration).searchProductListsByIds(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * The UpdateProductList endpoint is used to update an existing collection of products within the system.
     * @summary Update Collection
     * @param {ProductlistUpdateProductListRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductListApi
     */
    public updateProductList(body: ProductlistUpdateProductListRequest, options?: RawAxiosRequestConfig) {
        return ProductListApiFp(this.configuration).updateProductList(body, options).then((request) => request(this.axios, this.basePath));
    }
}



